---
import { getCollection, type CollectionEntry, render } from 'astro:content';
import SlideLayout from '../../../../layouts/SlideLayout.astro';
import { parseSlideId } from '../../../../utils/slide-path.ts';


type SlideEntry = CollectionEntry<'slides'>;

export async function getStaticPaths() {
  

  const slides = await getCollection('slides');
  const filtered = slides.filter(s => {
    if (!import.meta.env.DEV && (s.data.draft || s.data.hidden)) return false;
    return true;
  });
  return filtered.map((entry) => {
    const { lecture, slide } = parseSlideId(entry.id);
    return { params: { lecture, slide }, props: { entry } };
  });
}

const { entry }:{ entry: SlideEntry } = Astro.props;
const { Content } = await render(entry);

const { lecture, slide: current } = parseSlideId(entry.id);

// Fetch only this lecture's slides directly; mirror filtering used in getStaticPaths
const all = await getCollection('slides', ({ id }) => parseSlideId(id).lecture === lecture)
  .then(arr => arr.filter(s => {
    if (!import.meta.env.DEV && (s.data.draft || s.data.hidden)) return false;
    return true;
  }));

// Stable sort: order then natural slide name
const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });
all.sort((a, b) => {
  const ao = a.data.order ?? Infinity, bo = b.data.order ?? Infinity;
  if (ao !== bo) return ao - bo;
  return collator.compare(parseSlideId(a.id).slide, parseSlideId(b.id).slide);
});

const idx = all.findIndex((s) => s.id === entry.id);
if (idx === -1) {
  throw new Error('Slide not available (draft/hidden in production).');
}
const totalSlides = all.length;

const firstName = all[0] ? parseSlideId(all[0].id).slide : undefined;
const prevName = idx > 0 ? parseSlideId(all[idx - 1].id).slide : undefined;
const nextName = idx < all.length - 1 ? parseSlideId(all[idx + 1].id).slide : undefined;

const href = (name?: string) => (name ? `../${name}/` : undefined);

const startHref = href(firstName) ?? './';
const prevHref = href(prevName);
const nextHref = href(nextName);

const title = entry.data.title ?? current;
const isDraft = !!entry.data.draft && import.meta.env.DEV;
const isHidden = !!entry.data.hidden && import.meta.env.DEV;

---
<SlideLayout
  title={title}
  lecture={lecture}
  lectureHref="../../"
  startHref={startHref}
  prevHref={prevHref}
  nextHref={nextHref}
  slideNumber={idx + 1}
  totalSlides={totalSlides}
  isDraft={isDraft}
  isHidden={isHidden}
>
  <Content />
</SlideLayout>