---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import QRCode from '../QRCode.astro';

export interface Props {
  title: string;
  subtitle?: string;
  kicker?: string;          // e.g., course/lecture name
  author?: string;
  date?: string;
  logo?: ImageMetadata | string;
  logoDark?: ImageMetadata | string;
  logoAlt?: string;
  fullHeight?: boolean;     // fill content area vertically (default true)
  align?: 'center' | 'left';
  class?: string;           // outer container
  panelClass?: string;      // inner panel (bg, rounded, shadow, padding)
  logoSize?: 'sm' | 'md' | 'lg' | 'xl';  // controls logo max height
  url?: string; // <-- Add this line;
  qr?: string; // <-- Add this line: QR code value (optional)
}

const {
  title,
  subtitle,
  kicker,
  author,
  date,
  logo,
  logoDark,
  logoAlt = 'Logo',
  fullHeight = true,
  align = 'center',
  class: className = '',
  panelClass = 'bg-white/70 dark:bg-neutral-900/70 rounded-2xl p-10 shadow-lg',
  logoSize = 'sm',
  url,
  qr,
} = Astro.props;

const outerH = fullHeight ? 'h-full min-h-0' : '';
const textAlign = align === 'left' ? 'text-left items-start' : 'text-center items-center';

const sizeClass =
  logoSize === 'sm' ? 'max-h-20'
  : logoSize === 'lg' ? 'max-h-36'
  : logoSize === 'xl' ? 'max-h-48'
  : 'max-h-24';

const isStr = (v: any): v is string => typeof v === 'string';
---
<article class={`not-prose ${outerH} grid place-items-center ${className}`}>
  <div class={`max-w-[80%] w-full flex flex-col gap-6 ${textAlign} ${panelClass}`}>
    {logo || logoDark ? (
      <div class={`w-auto ${align === 'left' ? '' : 'mx-auto'} ${sizeClass}`}>
        {logoDark ? (
          <>
            {isStr(logo) ? (
              <img src={logo as string} alt={logoAlt} class={`block dark:hidden ${sizeClass} w-auto`} />
            ) : (
              <Image src={logo as ImageMetadata} alt={logoAlt} class={`block dark:hidden ${sizeClass} w-auto`} />
            )}
            {isStr(logoDark) ? (
              <img src={logoDark as string} alt={logoAlt} class={`hidden dark:block ${sizeClass} w-auto`} />
            ) : (
              <Image src={logoDark as ImageMetadata} alt={logoAlt} class={`hidden dark:block ${sizeClass} w-auto`} />
            )}
          </>
        ) : (
          isStr(logo) ? (
            <img src={logo as string} alt={logoAlt} class={`block ${sizeClass} w-auto`} />
          ) : (
            <Image src={logo as ImageMetadata} alt={logoAlt} class={`block ${sizeClass} w-auto`} />
          )
        )}
      </div>
    ) : null}

    {kicker ? <p class="uppercase tracking-wide text-sm text-neutral-600 dark:text-neutral-400">{kicker}</p> : null}

    <h1 class={`font-extrabold leading-tight ${align === 'left' ? '' : 'mx-auto'} text-1xl`}>
      {title}
    </h1>

    {subtitle ? (
      <h2 class="text-5xl font-semibold text-neutral-700 dark:text-neutral-200 leading-snug">
        {subtitle}
      </h2>
    ) : null}

    {(author || date) ? (
      <p class="text-lg text-neutral-600 dark:text-neutral-300">
        {author}{author && date ? ' Â· ' : ''}{date}
      </p>
    ) : null}

    {url || qr ? (
      <div class="mt-4 flex flex-col items-center gap-2">
        {url ? (
          <a href={url} target="_blank" rel="noopener noreferrer" class="text-blue-600 underline break-all">{url}</a>
        ) : null}
        {qr ? (
          <QRCode value={qr} size={160} class="mt-2" />
        ) : null}
      </div>
    ) : null}
  </div>
</article>