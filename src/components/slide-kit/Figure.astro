---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

export interface Props {
  src: ImageMetadata;
  alt: string;
  srcDark?: ImageMetadata;
  caption?: string;
  fit?: 'contain' | 'cover';
  boxed?: boolean;
  align?: 'start' | 'center' | 'end';
  invertOnDark?: boolean;
  class?: string;
  mediaClass?: string;
  imgClass?: string;
  captionClass?: string;
  sizes?: string;
  loading?: 'lazy' | 'eager';
}

const {
  src,
  alt,
  srcDark,
  caption,
  fit = 'contain',
  boxed = false,
  align = 'center',
  invertOnDark = false,
  class: className = '',
  mediaClass = '',
  imgClass = '',
  captionClass = '',
  sizes = '100vw',
  loading = 'lazy',
  ...rest
} = Astro.props;

const alignClass =
  align === 'start' ? 'ml-0 mr-auto' :
  align === 'end'  ? 'ml-auto mr-0' :
  'mx-auto';

const fitClass = fit === 'cover' ? 'object-cover' : 'object-contain';
const imgSizeClass = boxed ? 'w-full h-full' : 'w-auto h-auto max-w-full';
const invertClass = !srcDark && invertOnDark ? 'dark:invert dark:brightness-100' : '';

// Align with Explorable: default slot or caption prop
const hasSlotCaption = Astro.slots.has('default');
const hasCaption = hasSlotCaption || !!caption;
const captionId = hasCaption ? `figcap-${Math.random().toString(36).slice(2)}` : undefined;
---
<figure class={`not-prose  ${alignClass} ${className}`} aria-labelledby={captionId} {...rest}>
  <div class={`relative overflow-hidden ${boxed ? '' : 'inline-block'} ${mediaClass}`}>
    {srcDark ? (
      <>
        <Image
          src={src}
          alt={alt}
          class={`block ${imgSizeClass} ${boxed ? fitClass : ''} dark:hidden ${imgClass}`}
          sizes={sizes}
          loading={loading}
          decoding="async"
        />
        <Image
          src={srcDark}
          alt={alt}
          class={`hidden dark:block ${imgSizeClass} ${boxed ? fitClass : ''} ${imgClass}`}
          sizes={sizes}
          loading={loading}
          decoding="async"
        />
      </>
    ) : (
      <Image
        src={src}
        alt={alt}
        class={`block ${imgSizeClass} ${boxed ? fitClass : ''} ${invertClass} ${imgClass}`}
        sizes={sizes}
        loading={loading}
        decoding="async"
      />
    )}
  </div>

  {hasCaption ? (
    <figcaption id={captionId} class={`mt-3 text-center ${captionClass}`}>
      {hasSlotCaption ? <slot /> : caption}
    </figcaption>
  ) : null}
</figure>