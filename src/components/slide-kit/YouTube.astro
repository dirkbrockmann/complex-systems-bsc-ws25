---
export interface Props {
  videoId?: string;                 // e.g. "dQw4w9WgXcQ"
  url?: string;                     // or a full YouTube URL (watch/shorts/share)
  title?: string;                   // accessible title for iframe
  caption?: string;                 // optional caption (or use <slot name="caption" />)

  // Player options
  start?: number;
  autoplay?: boolean;               // note: most browsers require mute for autoplay
  controls?: boolean;
  mute?: boolean;
  loop?: boolean;                   // adds playlist param automatically
  rel?: 0 | 1;                      // show related videos
  modest?: boolean;                 // modestbranding
  playsInline?: boolean;            // playsinline=1

  // Layout/styling
  class?: string;                   // outer figure
  mediaClass?: string;              // aspect/rounding/shadow on the box
  frameClass?: string;              // extra classes for iframe
  aspect?: string | number;         // e.g. "16/9", "4/3", 1 (uses CSS aspect-ratio)
  allowFullscreen?: boolean;
  privacyEnhanced?: boolean;        // use youtube-nocookie.com
}

const {
  videoId,
  url,
  title = 'YouTube video',
  caption,
  start,
  autoplay = false,
  controls = true,
  mute = false,
  loop = false,
  rel = 0,
  modest = true,
  playsInline = true,
  class: className = '',
  mediaClass = '',
  frameClass = '',
  aspect,
  allowFullscreen = true,
  privacyEnhanced = true,
  ...rest
} = Astro.props;

function extractId(input?: string) {
  if (!input) return undefined;
  try {
    // Accept bare IDs
    if (/^[\w-]{11}$/.test(input)) return input;
    const u = new URL(input);
    if (u.hostname.includes('youtu.be')) return u.pathname.slice(1);
    if (u.searchParams.get('v')) return u.searchParams.get('v')!;
    // Shorts or /embed/ links
    const parts = u.pathname.split('/');
    const idx = parts.findIndex(p => p === 'shorts' || p === 'embed');
    if (idx >= 0 && parts[idx + 1]) return parts[idx + 1];
  } catch {}
  return undefined;
}

const id = videoId ?? extractId(url);
if (!id) {
  throw new Error('YouTube.astro: Provide videoId or url.');
}

const base = privacyEnhanced ? 'https://www.youtube-nocookie.com' : 'https://www.youtube.com';

const qs = new URLSearchParams();
if (start && start > 0) qs.set('start', String(start));
qs.set('controls', controls ? '1' : '0');
if (autoplay) qs.set('autoplay', '1');
if (playsInline) qs.set('playsinline', '1');
if (modest) qs.set('modestbranding', '1');
qs.set('rel', String(rel));
if (loop) {
  qs.set('loop', '1');
  qs.set('playlist', id);
}
// Autoplay usually needs muted
if (autoplay && !mute) qs.set('mute', '1');
else if (mute) qs.set('mute', '1');

const src = `${base}/embed/${id}?${qs.toString()}`;
const hasCaption = !!caption || Astro.slots.has('caption');
const captionId = hasCaption ? `ytcap-${Math.random().toString(36).slice(2)}` : undefined;
---
<figure class={`not-prose my-4 ${className}`} aria-labelledby={captionId} {...rest}>
  <div
    class={`relative overflow-hidden ${aspect ? '' : 'aspect-video'} ${mediaClass}`}
    style={aspect ? `aspect-ratio:${aspect};` : undefined}
  >
    <iframe
      title={title}
      src={src}
      loading="lazy"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
      referrerpolicy="strict-origin-when-cross-origin"
      allowfullscreen={allowFullscreen}
      class={`block w-full h-full ${frameClass}`}
    />
  </div>

  {hasCaption ? (
    <figcaption id={captionId} class="mt-3 text-center text-neutral-600 dark:text-neutral-300">
      {caption}
      <slot name="caption" />
    </figcaption>
  ) : null}
</figure>